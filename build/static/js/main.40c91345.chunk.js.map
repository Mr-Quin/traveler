{"version":3,"sources":["store.tsx","components/3d/Particles.tsx","hooks/useTurntable.tsx","hooks/useWobble.tsx","components/3d/Rings.tsx","components/3d/Prism.tsx","components/3d/Effects.jsx","hooks/useOrbit.tsx","components/3d/Planets.tsx","components/3d/Loading.tsx","components/3d/Environment.tsx","components/3d/VRCamera.tsx","hooks/useVR.tsx","components/UI.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/2k_sun.jpg","assets/2k_makemake_fictional.jpg","assets/2k_haumea_fictional.jpg","assets/2k_ceres_fictional.jpg","assets/8k_stars_milky_way.jpg"],"names":["useStore","create","set","get","prismColorPrimary","THREE","prismColorSecondary","prismPosition","cameraPosition","prismScale","ringColor","groundColor","marsPosition","moon1Position","moon2Position","glRenderer","isMobile","test","navigator","userAgent","effectsEnabled","quality","window","devicePixelRatio","actions","setGL","gl","setEnableEffects","bool","setQuality","newQuality","Particles","count","instance","useRef","emissionColor","state","dummy","useMemo","particles","Array","fill","map","d","Math","random","offset","normalize","multiplyScalar","speed","scale","min","useFrame","forEach","particle","i","a","cos","sin","b","r","position","x","y","z","rotation","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","ref","args","length","frustumCulled","attach","color","emissive","useTurntable","axis","rate","useWobble","factor","defaultValue","fn","time","clock","getElapsedTime","Rings","forwardRef","props","height","rotationOffset","toruses","elt","degToRad","torus","arr","rd","size","PI","lerp","roughness","emissiveIntensity","opacity","transparent","side","Prism","prismGroup","cube","light1","light2","prismGeometry","cubeGeometry","toNonIndexed","useSpring","from","config","mass","tension","friction","cubeSpring","setCubeSpring","useEffect","interval","setInterval","clearInterval","material","intensity","distance","mesh","geometry","wireframe","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","Effects","composer","useThree","scene","camera","aspect","width","setSize","render","attachArray","FXAAShader","material-uniforms-resolution-value","useOrbit","targetRef","sub","applyAxisAngle","add","Planets","mars","moon1","moon2","sunLight","useState","target","setTarget","sunTexture","useLoader","sunTex","marsTexture","planetTex","moonTexture","moonTex","moon2Texture","moon2Tex","onUpdate","self","emissiveMap","LoadingText","styled","div","Loading","center","Environment","texture","sky","rt","image","fromEquirectangularTexture","background","VRCamera","rig","cam","xr","isPresenting","getCamera","remove","useVR","threeButton","setThreeButton","buttonText","setButtonText","disabled","setDisabled","onClickAction","useCallback","click","button","VRButton","createButton","isSessionSupported","then","supported","UIButton","top","bottom","left","right","border","padding","UI","vrButtonAction","as","href","onClick","App","vr","concurrent","antialias","fov","near","far","onCreated","setClearColor","style","shadowMap","fallback","minDistance","maxDistance","touches","ONE","ROTATE","TWO","DOLLY_PAN","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.40c91345.chunk.js","sourcesContent":["import create from 'zustand'\nimport * as THREE from 'three'\n\ntype State = {\n    prismColorPrimary: THREE.Color\n    prismColorSecondary: THREE.Color\n    prismPosition: THREE.Vector3\n    cameraPosition: THREE.Vector3\n    prismScale: THREE.Vector3\n    ringColor: THREE.Color\n    groundColor: THREE.Color\n    marsPosition: THREE.Vector3\n    moon1Position: THREE.Vector3\n    moon2Position: THREE.Vector3\n    glRenderer: THREE.WebGLRenderer | null\n    isMobile: boolean\n    effectsEnabled: boolean\n    quality: number\n    actions: {\n        setGL: (gl: THREE.WebGLRenderer) => void\n        setEnableEffects: (bool: boolean) => void\n        setQuality: (newQuality: number) => void\n    }\n}\n\nconst useStore = create<State>((set, get) => ({\n    prismColorPrimary: new THREE.Color('#355cd6'),\n    prismColorSecondary: new THREE.Color('#6cbca0'),\n    prismPosition: new THREE.Vector3(0, 8, 0),\n    cameraPosition: new THREE.Vector3(0, 1.6, 20),\n    prismScale: new THREE.Vector3(1, 1.8, 1),\n    ringColor: new THREE.Color('#d7ee9b'),\n    groundColor: new THREE.Color('#555555'),\n    marsPosition: new THREE.Vector3(250, 500, -600),\n    moon1Position: new THREE.Vector3(-650, 5, -400),\n    moon2Position: new THREE.Vector3(100, -50, 400),\n    glRenderer: null,\n    isMobile: /iPhone|iPad|iPod|Android/i.test(navigator.userAgent),\n    effectsEnabled: true,\n    quality: window.devicePixelRatio,\n    actions: {\n        setGL: (gl) => void set({ glRenderer: gl }),\n        setEnableEffects: (bool) => void set({ effectsEnabled: bool }),\n        setQuality: (newQuality) => void set({ quality: newQuality * window.devicePixelRatio }),\n    },\n}))\n\nexport default useStore\n","import React, { useRef, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport useStore from '../../store'\n\nconst Particles = ({ count = 1500, ...props }) => {\n    const instance = useRef<THREE.InstancedMesh>()\n\n    const emissionColor = useStore((state) => state.prismColorSecondary)\n\n    const dummy = useMemo(() => new THREE.Object3D(), [])\n    const particles: any[] = useMemo(() => {\n        return new Array(count).fill(null).map(() => {\n            const r = 5\n            return {\n                d: Math.random() * 10,\n                offset: new THREE.Vector3(\n                    Math.random() - 0.5,\n                    Math.random() - 0.5,\n                    Math.random() - 0.5\n                )\n                    .normalize()\n                    .multiplyScalar(Math.random() * r),\n                speed: Math.random() / 200 + 0.01,\n                scale: Math.min(0.1, Math.random() / 40),\n            }\n        })\n    }, [count])\n\n    useFrame(() => {\n        particles.forEach((particle, i) => {\n            const { offset, scale, speed } = particle\n            const d = (particle.d += speed / 2)\n            const a = Math.cos(d) + Math.sin(d) / 100\n            const b = Math.sin(d) + Math.cos(d * 2) / 100\n            const r = Math.cos(d)\n            dummy.position.set(offset.x + a / 10, offset.y + b / 10, offset.z + a / 10)\n            dummy.scale.set(scale, scale, scale)\n            dummy.rotation.set(r, r * 2, r * 3)\n            dummy.updateMatrix()\n            instance.current!.setMatrixAt(i, dummy.matrix)\n        })\n        instance.current!.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <instancedMesh\n            ref={instance}\n            args={[null as any, null as any, particles.length]}\n            position={[0, 8, 0]}\n            frustumCulled={false}\n        >\n            <icosahedronBufferGeometry attach=\"geometry\" args={[1]} />\n            <meshStandardMaterial attach=\"material\" color={'#ffffff'} emissive={emissionColor} />\n        </instancedMesh>\n    )\n}\n\nexport default Particles\n","import { useFrame } from 'react-three-fiber'\r\nimport React from 'react'\r\n\r\ntype T = (\r\n    ref: React.MutableRefObject<any>,\r\n    options: {\r\n        readonly axis?: string\r\n        readonly rate?: number\r\n    }\r\n) => React.MutableRefObject<any>\r\n\r\nconst useTurntable: T = (ref, { axis = 'y', rate = 0.01 }) => {\r\n    useFrame(() => {\r\n        ref.current!.rotation[axis] += rate\r\n    })\r\n    return ref\r\n}\r\n\r\nexport default useTurntable\r\n","import { useFrame } from 'react-three-fiber'\r\nimport React from 'react'\r\n\r\ntype T = (\r\n    ref: React.MutableRefObject<any>,\r\n    options: {\r\n        readonly axis?: string\r\n        readonly factor?: number\r\n        readonly defaultValue?: number\r\n        readonly fn?: string\r\n    }\r\n) => React.MutableRefObject<any>\r\n\r\nconst useWobble: T = (ref, { axis = 'y', factor = 1, defaultValue = 0, fn = 'sin' }) => {\r\n    useFrame((state) => {\r\n        const time = state.clock.getElapsedTime()\r\n        ref.current!.position[axis] = defaultValue + Math[fn](time) * factor\r\n    })\r\n    return ref\r\n}\r\n\r\nexport default useWobble\r\n","import React, { forwardRef, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { ReactThreeFiber, useFrame } from 'react-three-fiber'\nimport useStore from '../../store'\n\ninterface Props extends ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group> {\n    count?: number\n    height?: number\n    rotationOffset?: number\n}\n\nconst Rings = forwardRef((props: Props, ref) => {\n    const { count = 10, height = 20, rotationOffset = 10 } = props\n\n    const ringColor = useStore((state) => state.ringColor)\n\n    const instance = useRef<THREE.InstancedMesh>()\n\n    const dummy = useMemo(() => new THREE.Object3D(), [])\n    const toruses = useMemo(\n        () =>\n            new Array(count).fill(null).map((elt, i) => ({\n                z: i / count,\n                r: THREE.MathUtils.degToRad(i * rotationOffset),\n            })),\n        [count, rotationOffset]\n    )\n\n    useFrame(() => {\n        toruses.forEach((torus, i, arr) => {\n            const { z } = torus\n            if (z >= 1) {\n                torus.z = 0\n                if (i < toruses.length - 1) {\n                    torus.r = arr[i + 1].r + THREE.MathUtils.degToRad(rotationOffset)\n                } else {\n                    torus.r = arr[0].r + THREE.MathUtils.degToRad(rotationOffset)\n                }\n            }\n            const d = (torus.z += 0.001)\n            const rd = (torus.r += 0.001)\n            const size = 8 * Math.sin(Math.PI * z)\n\n            dummy.position.set(0, THREE.MathUtils.lerp(0, height, d), 0)\n            dummy.rotation.set(Math.PI / 2, 0, rd)\n            dummy.scale.set(size, size, size)\n            dummy.updateMatrix()\n            instance.current!.setMatrixAt(i, dummy.matrix)\n        })\n        instance.current!.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <group ref={ref as React.MutableRefObject<THREE.Group>} {...props}>\n            <instancedMesh ref={instance} args={[null as any, null as any, toruses.length]}>\n                <torusBufferGeometry attach=\"geometry\" args={[1, 0.002, 5, 3]} />\n                <meshStandardMaterial\n                    attach=\"material\"\n                    roughness={0.1}\n                    color={ringColor}\n                    emissive={ringColor}\n                    emissiveIntensity={0.5}\n                    opacity={0.5}\n                    transparent\n                    side={THREE.DoubleSide}\n                />\n            </instancedMesh>\n        </group>\n    )\n})\n\nexport default Rings\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport useTurntable from '../../hooks/useTurntable'\nimport useWobble from '../../hooks/useWobble'\nimport useStore from '../../store'\nimport Rings from './Rings'\nimport { animated as a, useSpring } from 'react-spring/three'\n\ntype SpringProps = {\n    rotation: [number, number, number]\n    scale: [number, number, number]\n}\n\nconst Prism = ({ ...props }) => {\n    const { prismColorPrimary, prismColorSecondary, prismPosition, prismScale } = useStore(\n        (state) => state\n    )\n\n    const prismGroup = useRef<THREE.Group>()\n    const cube = useRef<THREE.Mesh<THREE.BoxBufferGeometry, THREE.MeshStandardMaterial>>()\n    const light1 = useRef<THREE.PointLight>()\n    const light2 = useRef<THREE.PointLight>()\n\n    const prismGeometry = useMemo(() => new THREE.SphereBufferGeometry(3.5, 4, 2), [])\n    const cubeGeometry = useMemo(() => new THREE.BoxBufferGeometry(1, 1, 1).toNonIndexed(), [])\n\n    const [cubeSpring, setCubeSpring]: [SpringProps, any] = useSpring(() => ({\n        rotation: [\n            Math.random() * Math.PI * 4,\n            Math.random() * Math.PI * 4,\n            Math.random() * Math.PI * 4,\n        ],\n        scale: [1.4, 1.4, 1.4],\n        from: { rotation: [0, 0, 0], scale: [1.4, 1.4, 1.4] },\n        config: { mass: 30, tension: 10, friction: 6 },\n    }))\n\n    useEffect(() => {\n        const interval = setInterval(\n            () =>\n                void setCubeSpring({\n                    rotation: [\n                        Math.random() * Math.PI * 4,\n                        Math.random() * Math.PI * 4,\n                        Math.random() * Math.PI * 4,\n                    ],\n                }),\n            3000\n        )\n        return () => void clearInterval(interval)\n    }, [setCubeSpring])\n\n    useWobble(prismGroup, { defaultValue: prismPosition.y, factor: 0.5 })\n    useTurntable(prismGroup, { rate: 0.005 })\n\n    useFrame(({ clock }) => {\n        const time = clock.getElapsedTime()\n        cube.current!.material.emissiveIntensity = Math.sin(time * Math.PI * 0.5) / 2 + 1.5\n\n        // explode the cube\n        /*        const { position, normal } = cube.current!.geometry.attributes\n        for (let i = 0; i < 36; i++) {\n            const px = position.array[i * 3]\n            const py = position.array[i * 3 + 1]\n            const pz = position.array[i * 3 + 2]\n\n            const nx = normal.array[i * 3]\n            const ny = normal.array[i * 3 + 1]\n            const nz = normal.array[i * 3 + 2]\n\n            position.setXYZ(\n                i,\n                px + nx * 0.001 * Math.sin(time),\n                py + ny * 0.001 * Math.sin(time),\n                pz + nz * 0.001 * Math.sin(time)\n            )\n        }\n        position.needsUpdate = true*/\n\n        light1.current!.intensity = cube.current!.material.emissiveIntensity\n        light1.current!.position.y = prismGroup.current!.position.y\n        light2.current!.intensity = cube.current!.material.emissiveIntensity\n        light2.current!.position.y = -prismGroup.current!.position.y\n    })\n\n    return (\n        <group>\n            <group ref={prismGroup} position={prismPosition}>\n                {/*light*/}\n                <pointLight ref={light1} distance={20} color={prismColorPrimary} />\n                <pointLight ref={light2} distance={20} color={prismColorPrimary} />\n                {/*light cube*/}\n                <a.mesh ref={cube} geometry={cubeGeometry} {...cubeSpring}>\n                    <meshStandardMaterial\n                        attach=\"material\"\n                        color={prismColorSecondary}\n                        emissive={prismColorPrimary}\n                        side={THREE.DoubleSide}\n                    />\n                </a.mesh>\n                {/*wireframe*/}\n                <mesh scale={prismScale} geometry={prismGeometry}>\n                    <meshStandardMaterial\n                        attach=\"material\"\n                        color={prismColorSecondary}\n                        emissive={prismColorPrimary}\n                        wireframe\n                    />\n                </mesh>\n                {/*prism*/}\n                <mesh scale={prismScale} geometry={prismGeometry}>\n                    <meshPhysicalMaterial\n                        attach=\"material\"\n                        color={prismColorSecondary}\n                        opacity={0.4}\n                        transparent\n                    />\n                </mesh>\n            </group>\n            <Rings position={[prismPosition.x, prismPosition.y - 10, prismPosition.z]} />\n        </group>\n    )\n}\n\nexport default Prism\n","import * as THREE from 'three'\r\nimport React, { useRef, useEffect, useMemo } from 'react'\r\nimport { extend, useThree, useFrame } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\n\r\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass })\r\n\r\nconst Effects = ({ ...props }) => {\r\n    const composer = useRef()\r\n    const { scene, gl, size, camera } = useThree()\r\n    const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [size])\r\n    useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n    useFrame(() => composer.current.render(), 2)\r\n    return (\r\n        <effectComposer ref={composer} args={[gl]}>\r\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n            <unrealBloomPass attachArray=\"passes\" args={[aspect, 2, 1, 0.2]} />\r\n            <shaderPass\r\n                attachArray=\"passes\"\r\n                args={[FXAAShader]}\r\n                material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\r\n            />\r\n        </effectComposer>\r\n    )\r\n}\r\n\r\nexport default Effects\r\n","import React from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport * as THREE from 'three'\n\ntype T = (\n    ref: React.MutableRefObject<any>,\n    targetRef: React.MutableRefObject<any>,\n    options: {\n        readonly axis?: THREE.Vector3\n        readonly rate?: number\n    }\n) => React.MutableRefObject<any>\n\nconst useOrbit: T = (ref, targetRef, { axis = new THREE.Vector3(0, 1, 0), rate = 0.01 }) => {\n    /*\n     TODO: Provide another point to calculate rotation axis\n           The rotational axis is perpendicular to the plane constructed by ref, targetRef, and another Vector3\n     */\n\n    useFrame(() => {\n        ref.current!.position.sub(targetRef.current!.position)\n        ref.current!.position.applyAxisAngle(axis!, rate!)\n        ref.current!.position.add(targetRef.current!.position)\n    })\n    return ref\n}\n\nexport default useOrbit\n","import React, { useEffect, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from 'react-three-fiber'\nimport sunTex from '../../assets/2k_sun.jpg'\nimport planetTex from '../../assets/2k_makemake_fictional.jpg'\nimport moon2Tex from '../../assets/2k_haumea_fictional.jpg'\nimport moonTex from '../../assets/2k_ceres_fictional.jpg'\n\nimport useTurntable from '../../hooks/useTurntable'\nimport useOrbit from '../../hooks/useOrbit'\nimport useStore from '../../store'\n\nconst Planets = ({ ...props }) => {\n    const mars = useRef<THREE.Group>()\n    const moon1 = useRef<THREE.Group>()\n    const moon2 = useRef<THREE.Group>()\n    const sunLight = useRef<THREE.DirectionalLight>()\n\n    const { marsPosition, moon1Position, moon2Position } = useStore((state) => state)\n\n    const [target, setTarget] = useState<THREE.Object3D>()\n\n    const sunTexture = useLoader(THREE.TextureLoader, sunTex)\n    const marsTexture = useLoader(THREE.TextureLoader, planetTex)\n    const moonTexture = useLoader(THREE.TextureLoader, moonTex)\n    const moon2Texture = useLoader(THREE.TextureLoader, moon2Tex)\n\n    useEffect(() => void (target && (sunLight.current!.target = target)), [target])\n    useTurntable(mars, { rate: -0.0002 })\n    useTurntable(moon1, { rate: -0.0006 })\n    useTurntable(moon2, { rate: 0.0005 })\n    useOrbit(moon1, mars, { axis: new THREE.Vector3(-0.55, 1, 0).normalize(), rate: 0.00004 })\n    useOrbit(moon2, mars, { axis: new THREE.Vector3(3.667, 1, 0).normalize(), rate: 0.00002 })\n\n    return (\n        <>\n            {/*mars*/}\n            <group\n                ref={mars}\n                position={marsPosition}\n                rotation={[THREE.MathUtils.degToRad(30), 0, THREE.MathUtils.degToRad(5)]}\n            >\n                <mesh scale={[200, 200, 200]} onUpdate={(self) => setTarget(self)}>\n                    <sphereBufferGeometry attach=\"geometry\" args={[1, 64, 32]} />\n                    <meshStandardMaterial attach=\"material\" color={'#eeeeee'} map={marsTexture} />\n                </mesh>\n            </group>\n            {/*moon1*/}\n            <group ref={moon1} position={moon1Position}>\n                <mesh scale={[30, 30, 30]}>\n                    <sphereBufferGeometry attach=\"geometry\" args={[1, 64, 32]} />\n                    <meshStandardMaterial attach=\"material\" color={'#eeeeee'} map={moonTexture} />\n                </mesh>\n            </group>\n            {/*moon2*/}\n            <group ref={moon2} position={moon2Position}>\n                <mesh scale={[30, 30, 30]}>\n                    <sphereBufferGeometry attach=\"geometry\" args={[1, 64, 32]} />\n                    <meshStandardMaterial attach=\"material\" color={'#888888'} map={moon2Texture} />\n                </mesh>\n            </group>\n            {/*sun*/}\n            <group position={[-800, 200, -2000]}>\n                <pointLight ref={sunLight} color={'#ffe3bf'} intensity={1} />\n                <mesh scale={[20, 20, 20]}>\n                    <sphereBufferGeometry attach=\"geometry\" args={[1, 64, 32]} />\n                    <meshStandardMaterial\n                        attach=\"material\"\n                        color={'#ffffff'}\n                        emissiveMap={sunTexture}\n                        emissive={new THREE.Color('#ffffff')}\n                        emissiveIntensity={1.5}\n                    />\n                </mesh>\n            </group>\n        </>\n    )\n}\n\nexport default Planets\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Html } from 'drei'\nimport useStore from '../../store'\n\nconst LoadingText = styled.div`\n    color: white;\n    background: rgba(0, 0, 0, 0.1);\n    padding: 6px 12px;\n    border-radius: 5px;\n    border: 1px solid white;\n    opacity: 0.8;\n`\n\nconst Loading = () => {\n    const position = useStore((state) => state.prismPosition)\n\n    return (\n        <group>\n            <mesh position={position}>\n                <boxBufferGeometry attach=\"geometry\" args={[0, 0, 0]} />\n                <Html center>\n                    <LoadingText>Loading...</LoadingText>\n                </Html>\n            </mesh>\n        </group>\n    )\n}\n\nexport default Loading\n","import { useLoader, useThree } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport sky from '../../assets/8k_stars_milky_way.jpg'\nimport { useEffect } from 'react'\n\nconst Environment = () => {\n    const { scene, gl } = useThree()\n    const texture = useLoader(THREE.TextureLoader, sky)\n\n    useEffect(() => {\n        const rt = new THREE.WebGLCubeRenderTarget(texture.image.height)\n        rt.fromEquirectangularTexture(gl, texture)\n        scene.background = rt\n    })\n\n    return null\n}\n\nexport default Environment\n","import React, { useEffect, useRef } from 'react'\nimport { useThree } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport useStore from '../../store'\n\nconst VRCamera = () => {\n    const { camera, gl } = useThree()\n\n    const { cameraPosition } = useStore((state) => state)\n\n    const rig = useRef<THREE.Group>()\n\n    useEffect(() => {\n        // if (!gl.xr.isPresenting) return\n        const cam = gl.xr.isPresenting ? gl.xr.getCamera(camera) : camera\n        rig.current!.add(cam)\n        return () => void rig.current!.remove(cam)\n    }, [gl.xr.isPresenting, gl.xr, camera, rig])\n\n    return <group ref={rig} position={cameraPosition} />\n}\n\nexport default VRCamera\n","import { useCallback, useEffect, useState } from 'react'\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton'\nimport useStore from '../store'\n\ninterface XRSystem {\n    isSessionSupported(sessionType: string): Promise<null>\n}\n\ndeclare global {\n    interface Navigator {\n        xr: XRSystem\n    }\n}\n\ntype T = () => [() => void, string, boolean]\n\nconst HAS_VR = 'Enter VR'\nconst NO_VR = 'VR Unavailable'\n\n/**\n * A wrapper around the Threejs VRButton import.\n */\nconst useVR: T = () => {\n    const [threeButton, setThreeButton] = useState<HTMLButtonElement>()\n    const [buttonText, setButtonText] = useState('')\n    const [disabled, setDisabled] = useState(false)\n\n    const gl = useStore((state) => state.glRenderer)\n    const setEnableEffects = useStore((state) => state.actions.setEnableEffects)\n\n    const onClickAction = useCallback(() => {\n        threeButton!.click()\n        setEnableEffects(false)\n    }, [threeButton])\n\n    useEffect(() => {\n        if (!navigator.xr || !gl) return\n        const button = VRButton.createButton(gl)\n        setThreeButton(button as HTMLButtonElement)\n        navigator.xr.isSessionSupported('immersive-vr').then((supported) => {\n            supported ? setButtonText(HAS_VR) : setButtonText(NO_VR)\n        })\n    }, [gl])\n\n    useEffect(() => {\n        setDisabled(buttonText === NO_VR)\n    }, [buttonText])\n\n    return [onClickAction, buttonText, disabled]\n}\n\nexport default useVR\n","import React from 'react'\nimport styled from 'styled-components'\n// import useStore from '../store'\nimport useVR from '../hooks/useVR'\n\ntype UIButtonProps = {\n    readonly position?: string\n    readonly top?: string\n    readonly bottom?: string\n    readonly left?: string\n    readonly right?: string\n    readonly width?: string\n    readonly padding?: string\n    readonly border?: boolean\n}\n\nexport const UIButton = styled.button<UIButtonProps>`\n    position: ${(props) => props.position || 'fixed'};\n    color: #fff;\n    top: ${(props) => props.top};\n    bottom: ${(props) => props.bottom};\n    left: ${(props) => props.left};\n    right: ${(props) => props.right};\n    width: ${(props) => props.width};\n    border: ${(props) => props.border && '1px solid #fff'};\n    border-radius: 5px;\n    background: rgba(0, 0, 0, 0.1);\n    padding: ${(props) => props.padding || '6px 12px'};\n    text-align: center;\n    opacity: 0.8;\n    outline: none;\n    z-index: 999;\n    transition: opacity 0.3s;\n    &:hover {\n        ${(props) => (props.disabled ? null : `opacity:1`)}\n    }\n`\n\nconst UI = () => {\n    // const setQuality = useStore((state) => state.actions.setQuality)\n    const [vrButtonAction, buttonText, disabled] = useVR()\n\n    return (\n        <>\n            <UIButton\n                as={'a'}\n                top={'10px'}\n                left={'10px'}\n                border\n                href={'https://github.com/Mr-Quin/traveler'}\n                target={'/'}\n            >\n                Source\n            </UIButton>\n            {/*<UIButton as={'div'} bottom={'20px'} left={'10px'} padding={'0'}>*/}\n            {/*    <UIButton position={'relative'} border onClick={() => void setQuality(0.25)}>*/}\n            {/*        Low*/}\n            {/*    </UIButton>*/}\n            {/*    <UIButton position={'relative'} border onClick={() => void setQuality(0.5)}>*/}\n            {/*        Medium*/}\n            {/*    </UIButton>*/}\n            {/*    <UIButton position={'relative'} border onClick={() => void setQuality(1)}>*/}\n            {/*        High*/}\n            {/*    </UIButton>*/}\n            {/*</UIButton>*/}\n            <UIButton\n                bottom={'20px'}\n                right={'20px'}\n                width={'120px'}\n                border\n                onClick={vrButtonAction}\n                disabled={disabled}\n            >\n                {buttonText}\n            </UIButton>\n        </>\n    )\n}\n\nexport default UI\n","import React, { Suspense } from 'react'\nimport { Canvas, useThree } from 'react-three-fiber'\nimport { OrbitControls } from 'drei'\nimport useStore from './store'\nimport Particles from './components/3d/Particles'\nimport Prism from './components/3d/Prism'\nimport Ground from './components/3d/Ground'\nimport Effects from './components/3d/Effects'\nimport Planets from './components/3d/Planets'\nimport StarrySky from './components/3d/StarrySky'\nimport Loading from './components/3d/Loading'\nimport Environment from './components/3d/Environment'\nimport VRCamera from './components/3d/VRCamera'\nimport UI from './components/UI'\nimport * as THREE from 'three'\n\nconst App = () => {\n    const {\n        isMobile,\n        cameraPosition,\n        effectsEnabled,\n        prismPosition,\n        actions: { setGL },\n    } = useStore((state) => state)\n\n    return (\n        <>\n            <Canvas\n                vr\n                concurrent\n                gl={{ antialias: true }}\n                camera={{\n                    fov: 70,\n                    position: cameraPosition,\n                    near: 0.01,\n                    far: 4000,\n                }}\n                onCreated={({ gl }) => {\n                    gl.setClearColor('#07060c')\n                    setGL(gl)\n                }}\n                style={{\n                    position: 'fixed',\n                    height: '100%',\n                    width: '100%',\n                    top: 0,\n                    left: 0,\n                }}\n                shadowMap\n            >\n                <Suspense fallback={<Loading />}>\n                    <Particles count={350} />\n                    <Prism />\n                    <Planets />\n                    {effectsEnabled ? <Environment /> : null}\n                    {/*<StarrySky factor={isMobile ? 25 : 20} />*/}\n                    {/*<Ground />*/}\n                    <ambientLight args={['#6368e2', 0.15]} />\n                </Suspense>\n                {effectsEnabled ? <Effects /> : null}\n                {effectsEnabled ? null : <VRCamera />}\n                <OrbitControls\n                    target={prismPosition}\n                    minDistance={10}\n                    maxDistance={125}\n                    // maxPolarAngle={1.7}\n                    touches={{\n                        ONE: THREE.TOUCH.ROTATE,\n                        TWO: THREE.TOUCH.DOLLY_PAN,\n                    }}\n                />\n            </Canvas>\n            <UI />\n        </>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n","module.exports = __webpack_public_path__ + \"static/media/2k_sun.f8d91fb7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_makemake_fictional.37998f7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_haumea_fictional.11888d39.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_ceres_fictional.e7dce55f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8k_stars_milky_way.6e6ebeca.jpg\";"],"sourceRoot":""}