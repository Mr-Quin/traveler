{"version":3,"sources":["stores/store.ts","stores/WarpStore.ts","components/3d/WarpEffect.tsx","shaders/warp.vert","shaders/warp.frag","components/3d/Effects.jsx","hooks/useTurntable.tsx","components/3d/FlareLight.tsx","components/3d/CelestialBody.tsx","stores/BodyStore.ts","components/3d/Planets.tsx","components/3d/Environment.tsx","components/3d/VRCamera.tsx","hooks/useVR.tsx","stores/AudioStore.ts","components/UI.tsx","components/Sound.tsx","components/3d/Rig.tsx","routes/Warp.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/sounds/ambient.ogg","assets/textures/2k_sun.jpg","assets/textures/2k_makemake_fictional.jpg","assets/textures/2k_ceres_fictional.jpg","assets/textures/2k_haumea_fictional.jpg","assets/textures/lens_flare.jpg","assets/textures/lens_flare_disk.jpg","assets/textures/lens_flare_blur.jpg","assets/textures/lens_flare_ring.jpg","assets/textures/8k_stars_milky_way.jpg"],"names":["useStore","create","set","get","statics","sunRef","undefined","prismColorPrimary","THREE","prismColorSecondary","prismPosition","cameraPosition","prismScale","ringColor","fov","glRenderer","isMobile","test","navigator","userAgent","effectsEnabled","quality","window","devicePixelRatio","actions","setGL","gl","setEnableEffects","bool","setQuality","newQuality","yRotation","FOV","getState","useWarpStore","mutations","rig","camera","controls","target","threshold","speed","targetSpeed","warping","stopped","startWarp","state","stop","alignTo","to","warpTo","setTimeout","diameter","Math","tan","PI","init","quaternion","copy","multiply","position","addEffect","q1","lookAt","q2","slerp","t","clone","max","distanceTo","translateZ","distanceOffset","WarpEffect","uniforms","useRef","iTime","value","iResolution","seed","random","uSpeed","aspect","useThree","plane","useUpdate","current","scale","setX","useFrame","clock","getElapsedTime","ref","attach","args","vertexShader","fragmentShader","transparent","side","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","Effects","composer","scene","size","useMemo","width","height","useEffect","setSize","render","attachArray","FXAAShader","material-uniforms-resolution-value","useTurntable","axis","rate","rotation","FlareLight","Lensflare","useLoader","lensFlare","lensFlareDisk","lensFlareBlur","lensFlareRing","light","color","intensity","CelestialBody","forwardRef","children","props","isStar","texture","turnRate","mesh","map","emissive","emissiveMap","emissiveIntensity","roughness","useBodyStore","bodies","name","sunTex","marsTex","moon1Tex","moon2Tex","Planets","sunCorona","corona","body","key","alphaMap","sizeAttenuation","Environment","sky","rt","image","fromEquirectangularTexture","background","VRCamera","cam","xr","isPresenting","getCamera","add","remove","useVR","useState","threeButton","setThreeButton","buttonText","setButtonText","disabled","setDisabled","onClickAction","useCallback","click","button","VRButton","createButton","isSessionSupported","then","supported","useAudioStore","audio","toggleAudio","UIButton","styled","top","bottom","left","right","border","padding","UI","vrButtonAction","as","href","onClick","ambient","Audio","ambientSound","Sound","shouldPlay","loop","play","pause","targets","warpToSelector","initSelector","Rig","group","setInterval","selector","Warp","vr","concurrent","antialias","near","far","onCreated","setClearColor","style","shadowMap","fallback","innerStyles","barStyles","containerStyles","dataStyles","App","basename","process","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.0e436358.chunk.js","sourcesContent":["import create from 'zustand'\nimport * as THREE from 'three'\n\ntype State = {\n    readonly statics: {}\n    prismColorPrimary: THREE.Color\n    prismColorSecondary: THREE.Color\n    prismPosition: THREE.Vector3\n    cameraPosition: THREE.Vector3\n    prismScale: THREE.Vector3\n    ringColor: THREE.Color\n    fov: number\n    glRenderer: THREE.WebGLRenderer | null\n    isMobile: boolean\n    effectsEnabled: boolean\n    quality: number\n    actions: {\n        setGL: (gl: THREE.WebGLRenderer) => void\n        setEnableEffects: (bool: boolean) => void\n        setQuality: (newQuality: number) => void\n    }\n}\n\nconst useStore = create<State>((set, get) => ({\n    statics: {},\n    sunRef: undefined,\n    prismColorPrimary: new THREE.Color('#355cd6'),\n    prismColorSecondary: new THREE.Color('#6cbca0'),\n    prismPosition: new THREE.Vector3(0, 8, 0),\n    cameraPosition: new THREE.Vector3(0, 1.6, 20),\n    prismScale: new THREE.Vector3(1, 1.8, 1),\n    ringColor: new THREE.Color('#d7ee9b'),\n    fov: 73.7,\n    glRenderer: null,\n    isMobile: /iPhone|iPad|iPod|Android/i.test(navigator.userAgent),\n    effectsEnabled: true,\n    quality: window.devicePixelRatio,\n    actions: {\n        setGL: (gl) => void set({ glRenderer: gl }),\n        setEnableEffects: (bool) => void set({ effectsEnabled: bool }),\n        setQuality: (newQuality) => void set({ quality: newQuality * window.devicePixelRatio }),\n    },\n}))\n\nexport default useStore\n","import create from 'zustand'\nimport { addEffect } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport useStore from './store'\n\ntype WarpStore = {\n    mutations: {\n        rig: THREE.Group | undefined\n        camera: THREE.Camera | undefined\n        controls: any\n        target: CelestialBodyType | undefined\n        threshold: number\n        speed: number\n        targetSpeed: number\n        warping: boolean\n        stopped: boolean\n    }\n    actions: {\n        readonly startWarp: () => void\n        readonly stop: () => void\n        readonly warpTo: (to: CelestialBodyType) => void\n        readonly alignTo: (to: CelestialBodyType) => void\n    }\n    init: (rig: THREE.Group, camera: THREE.Camera, controls: any) => void\n}\n\nconst yRotation = new THREE.Quaternion(0, 1, 0, 0)\nconst DISTANCE_OFFSET = 110\nconst FOV = useStore.getState().fov\n\nconst useWarpStore = create<WarpStore>((set, get) => ({\n    mutations: {\n        rig: undefined,\n        camera: undefined,\n        controls: undefined,\n        target: undefined,\n        threshold: 0,\n        speed: 0,\n        targetSpeed: 0,\n        warping: false,\n        stopped: true,\n    },\n    actions: {\n        startWarp: () =>\n            // @ts-ignore\n            set((state) => {\n                state.mutations.targetSpeed = 100\n                state.mutations.warping = true\n            }),\n        stop: () =>\n            // @ts-ignore\n            set((state) => {\n                state.mutations.targetSpeed = 0\n                state.mutations.warping = false\n                state.mutations.stopped = true\n            }),\n        alignTo: (to) =>\n            // @ts-ignore\n            set((state) => {\n                state.mutations.targetSpeed = 5\n                state.mutations.target = to\n                state.mutations.stopped = false\n            }),\n        warpTo: (to) => {\n            get().actions.alignTo(to)\n            setTimeout(() => {\n                // @ts-ignore\n                set((state) => {\n                    // state.mutations.target = to\n                    state.mutations.threshold =\n                        to.diameter / 2 / Math.tan((Math.PI * FOV) / 360) + DISTANCE_OFFSET // calculate the distance needed for the object to fill the screen. Offset for deceleration\n                })\n                get().actions.startWarp()\n            }, 3000)\n        },\n    },\n    init: (rig, camera, controls) => {\n        const mutations = get().mutations\n        const actions = get().actions\n        // @ts-ignore\n        set((state) => {\n            state.mutations.rig = rig\n            state.mutations.camera = camera\n            state.mutations.controls = controls\n        })\n\n        // attach camera to rig on init\n        mutations.camera!.quaternion.copy(mutations.rig!.quaternion).multiply(yRotation)\n        mutations.camera!.position.copy(mutations.rig!.position)\n\n        // @ts-ignore\n        addEffect(() => {\n            const {\n                speed,\n                targetSpeed,\n                warping,\n                stopped,\n                rig,\n                camera,\n                controls,\n                target,\n                threshold,\n            } = mutations\n\n            if (stopped) {\n                mutations.speed += (0 - speed) * 0.05 // target speed is 0 when not warping. Decelerate faster\n            } else if (!stopped) {\n                // rotate rig to face target\n                const q1 = new THREE.Quaternion().copy(rig!.quaternion)\n                rig!.lookAt(target!.position)\n                const q2 = new THREE.Quaternion().copy(rig!.quaternion)\n                THREE.Quaternion.slerp(q1, q2, rig!.quaternion, 0.03)\n\n                // rotate camera to face rig\n                const t = rig!.quaternion.clone().multiply(yRotation) // rotate camera 180degrees around Y\n                camera!.quaternion.slerp(t, 0.1)\n\n                // accelerate\n                mutations.speed += (targetSpeed - speed) * Math.max(speed / 2000, 0.001)\n\n                // end warp when close to target\n                const distanceLeft = rig!.position.distanceTo(target!.position) - target!.diameter\n                if (distanceLeft < threshold) actions.stop()\n            }\n            // apply speed to position\n            rig!.translateZ(mutations.speed / 20)\n            // camera!.position.lerp(rig!.position, 0.8)\n            camera!.position.copy(rig!.position)\n            // controls.target.copy(rig!.position)\n        })\n    },\n}))\n\nexport default useWarpStore\n","import React, { useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useThree, useUpdate } from 'react-three-fiber'\nimport useWarpStore from '../../stores/WarpStore'\nimport useStore from '../../stores/store'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport vertex from '!!raw-loader!../../shaders/warp.vert'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport frag from '!!raw-loader!../../shaders/warp.frag'\n\nconst FOV = useStore.getState().fov\nconst distanceOffset = 1 / 2 / Math.tan((Math.PI * FOV) / 360)\n\nconst mutations = useWarpStore.getState().mutations\n\n/**\n * A plane with a fragment shader. Placed so that it covers the screen exactly\n */\n/**\n * TODO: Add this to effect so it always covers the screen\n */\n\nconst WarpEffect = () => {\n    const uniforms = useRef<Uniforms>({\n        iTime: { value: 0 },\n        iResolution: { value: new THREE.Vector2(1, 1) },\n        seed: { value: Math.random() / 5 },\n        uSpeed: { value: 0 },\n    })\n    const { aspect } = useThree()\n\n    const plane = useUpdate<THREE.Mesh>(() => {\n        plane.current!.scale.setX(aspect)\n        uniforms.current!.iResolution.value = new THREE.Vector2(aspect, 1) // update shader aspect ratio here\n    }, [aspect])\n\n    useFrame(({ clock }) => {\n        uniforms.current.uSpeed.value = mutations.speed\n        uniforms.current.iTime.value = clock.getElapsedTime()\n    })\n\n    return (\n        <mesh ref={plane} position={[0, 0, distanceOffset]}>\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n            <shaderMaterial\n                attach=\"material\"\n                args={[\n                    {\n                        uniforms: uniforms.current,\n                        vertexShader: vertex,\n                        fragmentShader: frag,\n                    },\n                ]}\n                transparent\n                side={THREE.DoubleSide}\n            />\n        </mesh>\n    )\n}\n\nexport default WarpEffect\n","export default \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\\n\";","export default \"uniform vec3 iResolution;\\nuniform float iTime;\\nuniform float uSpeed;   // a value from 0 to 100\\nuniform float seed;\\nvarying vec2 vUv;\\n\\n// adapted from https://www.shadertoy.com/view/Msl3WH\\n\\nfloat map(float value, float min1, float max1, float min2, float max2) {\\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\\n}\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\\n    float time = iTime * 10.0;\\n\\n    float s = 0.0;\\n    float v = 0.0;\\n\\n    vec2 uv = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\\n\\n    float t = time * 0.005;\\n\\n    vec3 col = vec3(0.0);\\n\\n    vec3 init = vec3(0.25 + seed, 0.25 + sin(time * 0.001) * 0.4, time * 0.005);\\n\\n    for (float r = 0.; r < uSpeed * 1.2; r++) {\\n        vec3 p = init + s * vec3(uv, map(uSpeed, 0., 100., 0.135, 0.005));\\n\\n        p.z = mod(p.z, 2.0);\\n\\n        for (int i = 0; i < 10; i++) {\\n            p = abs(p * 2.04) / dot(p, p) - 0.75;\\n        }\\n\\n        v += length(p * p) * smoothstep(0.0, 0.5, 1.0 - s) * .002;\\n\\n        col += vec3( + v * 0.5, 0.1 + v * 0.5, 1.2 - s * 0.5) * v * 0.007;\\n        s += .01;\\n    }\\n    fragColor = vec4(col, col.x+col.y+col.z/6.);\\n}\\n\\nvoid main() {\\n    mainImage(gl_FragColor, vUv * iResolution.xy);\\n}\\n\";","import * as THREE from 'three'\nimport React, { useRef, useEffect, useMemo } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\n\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass })\n\nconst Effects = () => {\n    const composer = useRef()\n    const { scene, gl, size, camera } = useThree()\n    const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [size])\n    useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n    useFrame(() => composer.current.render(), 2)\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n            <unrealBloomPass attachArray=\"passes\" args={[aspect, 0.4, 1, 0.2]} />\n            <shaderPass\n                attachArray=\"passes\"\n                args={[FXAAShader]}\n                material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n            />\n        </effectComposer>\n    )\n}\n\nexport default Effects\n","import { useFrame } from 'react-three-fiber'\nimport React from 'react'\n\ntype Turntable = (\n    ref: React.MutableRefObject<any>,\n    options: {\n        readonly axis?: string\n        readonly rate?: number\n    }\n) => React.MutableRefObject<any>\n\nconst useTurntable: Turntable = (ref, { axis = 'y', rate = 0.01 }) => {\n    useFrame(() => {\n        ref.current!.rotation[axis] += rate\n    })\n    return ref\n}\n\nexport default useTurntable\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from 'react-three-fiber'\nimport { lensFlare, lensFlareDisk, lensFlareBlur, lensFlareRing } from '../../assets'\nimport { Lensflare, LensflareElement } from 'three/examples/jsm/objects/Lensflare'\n\nconst lensflare = new Lensflare()\n\nconst randomRange = (lower, upper) => {\n    return lower + Math.random() * (upper - lower)\n}\n\nconst FlareLight = () => {\n    const flareTex = useLoader(THREE.TextureLoader, lensFlare)\n    const flareDiskTex = useLoader(THREE.TextureLoader, lensFlareDisk)\n    const flareBlurTex = useLoader(THREE.TextureLoader, lensFlareBlur)\n    const flareRingTex = useLoader(THREE.TextureLoader, lensFlareRing)\n\n    const light = useRef<THREE.PointLight>()\n\n    // useEffect(() => {\n    //     lensflare.addElement(new LensflareElement(flareTex, 200, 0))\n    //\n    //     for (let i = 0; i < 10; i++) {\n    //         const offset = randomRange(0.05, 0.4)\n    //         const size = randomRange(16, 48)\n    //         const color = new THREE.Color().setHSL(randomRange(0, 1), randomRange(0, 0.1), 0.5)\n    //         lensflare.addElement(new LensflareElement(flareBlurTex, size, offset, color))\n    //     }\n    //     for (let i = 0; i < 5; i++) {\n    //         const offset = randomRange(-0.15, -0.05)\n    //         const size = randomRange(16, 48)\n    //         const color = new THREE.Color().setHSL(randomRange(0, 1), randomRange(0, 0.1), 0.5)\n    //         lensflare.addElement(new LensflareElement(flareBlurTex, size, offset, color))\n    //     }\n    //\n    //     light.current!.add(lensflare)\n    //\n    //     return () => void light.current!.remove(lensflare)\n    // }, [])\n\n    return <pointLight ref={light} color={'#ffffff'} intensity={1} />\n}\n\nexport default FlareLight\n","import React, { forwardRef, useRef } from 'react'\nimport * as THREE from 'three'\nimport { ReactThreeFiber, useLoader } from 'react-three-fiber'\nimport useTurntable from '../../hooks/useTurntable'\nimport FlareLight from './FlareLight'\n\ninterface CelestialBodyProps extends ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group> {\n    diameter: number\n    turnRate?: number\n    isStar?: boolean\n    texture?: any\n}\n\n/**\n * The base celestial body. Renders a sphere with a texture\n */\nconst CelestialBody = forwardRef(({ children, ...props }: CelestialBodyProps, ref) => {\n    const { diameter, isStar = false, texture, turnRate } = props\n    const mesh = useRef()\n\n    useTurntable(mesh, { rate: turnRate })\n\n    const map = useLoader(THREE.TextureLoader, texture)\n\n    return (\n        <group ref={ref as React.MutableRefObject<THREE.Group>} {...props}>\n            {isStar ? <FlareLight /> : null}\n            <mesh ref={mesh} scale={[diameter, diameter, diameter]}>\n                <sphereBufferGeometry attach=\"geometry\" args={[1, 64, 32]} />\n                <meshStandardMaterial\n                    attach=\"material\"\n                    color={'#eeeeee'}\n                    map={map}\n                    emissive={isStar ? new THREE.Color('#ffffff') : undefined}\n                    emissiveMap={isStar ? map : undefined}\n                    emissiveIntensity={isStar ? 1 : 0}\n                    roughness={0.5}\n                />\n            </mesh>\n            {children}\n        </group>\n    )\n})\n\nexport default CelestialBody\n","import create from 'zustand'\nimport * as THREE from 'three'\n\nimport { sunTex, marsTex, moon1Tex, moon2Tex } from '../assets'\n\ntype BodyState = {\n    bodies: CelestialBodyType[]\n}\n\nconst useBodyStore = create<BodyState>(() => ({\n    bodies: [\n        {\n            name: 'sun',\n            position: new THREE.Vector3(-800, 200, -2000),\n            diameter: 20,\n            texture: sunTex,\n            isStar: true,\n            turnRate: 0.0002,\n        },\n        {\n            name: 'mars',\n            position: new THREE.Vector3(250, 500, -600),\n            diameter: 200,\n            texture: marsTex,\n            turnRate: -0.0005,\n        },\n        {\n            name: 'moon1',\n            position: new THREE.Vector3(-650, 5, -400),\n            diameter: 30,\n            texture: moon1Tex,\n            turnRate: 0.0008,\n        },\n        {\n            name: 'moon2',\n            position: new THREE.Vector3(100, -50, 400),\n            diameter: 30,\n            texture: moon2Tex,\n            turnRate: 0.001,\n        },\n    ],\n}))\n\nexport default useBodyStore\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from 'react-three-fiber'\nimport CelestialBody from './CelestialBody'\n\nimport { lensFlare as corona } from '../../assets'\n\nimport useBodyStore from '../../stores/BodyStore'\n\nconst bodies = useBodyStore.getState().bodies\n\nconst Planets = () => {\n    const sunCorona = useLoader(THREE.TextureLoader, corona)\n\n    return (\n        <>\n            {bodies.map((body) => (\n                <CelestialBody {...body} key={body.name}>\n                    {body.isStar ? (\n                        <sprite scale={[0.5, 0.5, 0.5]}>\n                            <spriteMaterial\n                                attach={'material'}\n                                map={sunCorona}\n                                alphaMap={sunCorona}\n                                sizeAttenuation={false}\n                            />\n                        </sprite>\n                    ) : null}\n                </CelestialBody>\n            ))}\n        </>\n    )\n}\n\nexport default Planets\n","import { useLoader, useThree } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport sky from '../../assets/textures/8k_stars_milky_way.jpg'\nimport { useEffect } from 'react'\n\nconst Environment = () => {\n    const { scene, gl } = useThree()\n    const texture = useLoader(THREE.TextureLoader, sky)\n\n    useEffect(() => {\n        const rt = new THREE.WebGLCubeRenderTarget(texture.image.height)\n        rt.fromEquirectangularTexture(gl, texture)\n        scene.background = rt\n    })\n\n    return null\n}\n\nexport default Environment\n","import React, { useEffect, useRef } from 'react'\nimport { useThree } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport useStore from '../../stores/store'\n\nconst VRCamera = () => {\n    const { camera, gl } = useThree()\n\n    const { cameraPosition } = useStore((state) => state)\n\n    const rig = useRef<THREE.Group>()\n\n    useEffect(() => {\n        // if (!gl.xr.isPresenting) return\n        const cam = gl.xr.isPresenting ? gl.xr.getCamera(camera) : camera\n        rig.current!.add(cam)\n        return () => void rig.current!.remove(cam)\n    }, [gl.xr.isPresenting, gl.xr, camera, rig])\n\n    return <group ref={rig} position={cameraPosition} />\n}\n\nexport default VRCamera\n","import { useCallback, useEffect, useState } from 'react'\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton'\nimport useStore from '../stores/store'\n\ninterface XRSystem {\n    isSessionSupported(sessionType: string): Promise<null>\n}\n\ndeclare global {\n    interface Navigator {\n        xr: XRSystem\n    }\n}\n\ntype T = () => [() => void, string, boolean]\n\nconst HAS_VR = 'Enter VR'\nconst NO_VR = 'VR Unavailable'\n\n/**\n * A wrapper around the Threejs VRButton import.\n */\nconst useVR: T = () => {\n    const [threeButton, setThreeButton] = useState<HTMLButtonElement>()\n    const [buttonText, setButtonText] = useState('')\n    const [disabled, setDisabled] = useState(false)\n\n    const gl = useStore((state) => state.glRenderer)\n    const setEnableEffects = useStore((state) => state.actions.setEnableEffects)\n\n    const onClickAction = useCallback(() => {\n        threeButton!.click()\n        setEnableEffects(false)\n    }, [threeButton, setEnableEffects])\n\n    useEffect(() => {\n        if (!navigator.xr || !gl) return\n        const button = VRButton.createButton(gl)\n        setThreeButton(button as HTMLButtonElement)\n        navigator.xr.isSessionSupported('immersive-vr').then((supported) => {\n            supported ? setButtonText(HAS_VR) : setButtonText(NO_VR)\n        })\n    }, [gl])\n\n    useEffect(() => {\n        setDisabled(buttonText === NO_VR)\n    }, [buttonText])\n\n    return [onClickAction, buttonText, disabled]\n}\n\nexport default useVR\n","import create from 'zustand'\n\ntype AudioState = {\n    audio: boolean\n    toggleAudio: () => void\n}\n\nconst useAudioStore = create<AudioState>((set, get) => ({\n    audio: false,\n    toggleAudio: () => void set({ audio: !get().audio }),\n}))\n\nexport default useAudioStore\n","import React from 'react'\nimport styled from 'styled-components'\nimport useVR from '../hooks/useVR'\nimport useAudioStore from '../stores/AudioStore'\n\ntype UIButtonProps = {\n    readonly position?: string\n    readonly top?: string\n    readonly bottom?: string\n    readonly left?: string\n    readonly right?: string\n    readonly width?: string\n    readonly padding?: string\n    readonly border?: boolean\n}\n\nexport const UIButton = styled.button<UIButtonProps>`\n    position: ${(props) => props.position || 'fixed'};\n    color: #fff;\n    top: ${(props) => props.top};\n    bottom: ${(props) => props.bottom};\n    left: ${(props) => props.left};\n    right: ${(props) => props.right};\n    width: ${(props) => props.width};\n    border: ${(props) => props.border && '1px solid #fff'};\n    border-radius: 5px;\n    background: rgba(0, 0, 0, 0.1);\n    padding: ${(props) => props.padding || '6px 12px'};\n    text-align: center;\n    opacity: 0.8;\n    outline: none;\n    z-index: 999;\n    transition: opacity 0.3s;\n    &:hover {\n        ${(props) => (props.disabled ? null : `opacity:1`)}\n    }\n`\n\nconst UI = () => {\n    const audio = useAudioStore((state) => state.audio)\n    const toggleAudio = useAudioStore((state) => state.toggleAudio)\n    const [vrButtonAction, buttonText, disabled] = useVR()\n\n    return (\n        <>\n            <UIButton\n                as={'a'}\n                top={'10px'}\n                left={'10px'}\n                border\n                href={'https://github.com/Mr-Quin/traveler'}\n                target={'/'}\n            >\n                Source\n            </UIButton>\n            <UIButton bottom={'20px'} left={'10px'} border onClick={toggleAudio}>\n                Audio: {audio ? 'On' : 'Off'}\n            </UIButton>\n            <UIButton\n                bottom={'20px'}\n                right={'20px'}\n                width={'120px'}\n                border\n                onClick={vrButtonAction}\n                disabled={disabled}\n            >\n                {buttonText}\n            </UIButton>\n        </>\n    )\n}\n\nexport default UI\n","import { useEffect } from 'react'\nimport useAudioStore from '../stores/AudioStore'\n\nimport { ambientSound } from '../assets'\n\nconst ambient = new Audio(ambientSound)\n\nconst Sound = () => {\n    const shouldPlay = useAudioStore((state) => state.audio)\n\n    useEffect(() => {\n        ambient.loop = true\n    }, [])\n\n    useEffect(() => {\n        shouldPlay ? ambient.play() : ambient.pause()\n    }, [shouldPlay])\n\n    return null\n}\n\nexport default Sound\n","import React, { useEffect, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\nimport useWarpStore from '../../stores/WarpStore'\nimport useBodyStore from '../../stores/BodyStore'\nimport { OrbitControls } from 'drei'\nimport Vessel from './Vessel'\n\nconst targets = useBodyStore.getState().bodies\nconst warpToSelector = (state) => state.actions.warpTo\nconst initSelector = (state) => state.init\n\nconst Rig = (props) => {\n    const group = useRef<THREE.Group>()\n    const controls = useRef()\n\n    const { camera } = useThree()\n\n    const warpTo = useWarpStore(warpToSelector)\n    const init = useWarpStore(initSelector)\n\n    useEffect(() => {\n        init(group.current!, camera, controls.current!)\n    }, [])\n\n    useEffect(() => {\n        setTimeout(() => {\n            warpTo(targets[0])\n            setInterval(() => {\n                warpTo(targets[(Math.random() * 4) << 0])\n            }, 20000)\n        }, 2000)\n    }, [])\n\n    return (\n        <>\n            <group ref={group}>\n                <group>\n                    {/*<Vessel position={[0, -0.2, 1]} scale={[0.08, 0.08, 0.08]} />*/}\n                    {props.children}\n                </group>\n            </group>\n            {/*<OrbitControls*/}\n            {/*    ref={controls}*/}\n            {/*    target={[0, -0.2, 1]}*/}\n            {/*    maxDistance={125}*/}\n            {/*    touches={{*/}\n            {/*        ONE: THREE.TOUCH.ROTATE,*/}\n            {/*        TWO: THREE.TOUCH.DOLLY_PAN,*/}\n            {/*    }}*/}\n            {/*/>*/}\n        </>\n    )\n}\n\nexport default Rig\n","import React, { Suspense, useRef } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport { OrbitControls } from 'drei'\nimport useStore from '../stores/store'\nimport Particles from '../components/3d/Particles'\nimport Prism from '../components/3d/Prism'\nimport WarpEffect from '../components/3d/WarpEffect'\nimport Effects from '../components/3d/Effects'\nimport Planets from '../components/3d/Planets'\nimport Environment from '../components/3d/Environment'\nimport VRCamera from '../components/3d/VRCamera'\nimport UI from '../components/UI'\nimport Sound from '../components/Sound'\nimport Rig from '../components/3d/Rig'\nimport { Loader } from 'drei'\n\nconst selector = (state) => ({\n    cameraPosition: state.cameraPosition,\n    effectsEnabled: state.effectsEnabled,\n    setGL: state.actions.setGL,\n    fov: state.fov,\n})\n\nconst Warp = () => {\n    const { cameraPosition, effectsEnabled, setGL, fov } = useStore(selector)\n\n    // @ts-ignore\n    return (\n        <>\n            <Canvas\n                vr\n                concurrent\n                gl={{ antialias: true }}\n                camera={{\n                    fov: fov,\n                    position: cameraPosition,\n                    near: 0.01,\n                    far: 40000,\n                }}\n                onCreated={({ gl }) => {\n                    gl.setClearColor('#07060c')\n                    setGL(gl)\n                }}\n                style={{\n                    position: 'fixed',\n                    height: '100%',\n                    width: '100%',\n                    top: 0,\n                    left: 0,\n                }}\n                shadowMap\n            >\n                <Suspense fallback={null}>\n                    <Planets />\n                    {effectsEnabled ? <Environment /> : null}\n                    <Rig>\n                        <WarpEffect />\n                    </Rig>\n                    <ambientLight args={['#6368e2', 0.15]} />\n                    <Sound />\n                </Suspense>\n                {effectsEnabled ? <Effects /> : null}\n                {effectsEnabled ? null : <VRCamera />}\n            </Canvas>\n            <Loader innerStyles={null} barStyles={null} containerStyles={null} dataStyles={null} />\n            <UI />\n        </>\n    )\n}\n\nexport default Warp\n","import React from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport Home from './routes/Home'\nimport Warp from './routes/Warp'\n\nconst App = () => {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            {/*<Switch>*/}\n            {/*    <Route exact path={'/traveler'}>*/}\n            {/*        <Home />*/}\n            {/*    </Route>*/}\n            {/*    <Route exact path={'/warp'}>*/}\n            {/*        <Warp />*/}\n            {/*    </Route>*/}\n            <Route>\n                <Warp />\n            </Route>\n            {/*</Switch>*/}\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","module.exports = __webpack_public_path__ + \"static/media/ambient.51e1df41.ogg\";","module.exports = __webpack_public_path__ + \"static/media/2k_sun.f8d91fb7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_makemake_fictional.37998f7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_ceres_fictional.e7dce55f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_haumea_fictional.11888d39.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare.5c8678b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare_disk.9e9a510a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare_blur.15645033.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare_ring.2e90f194.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8k_stars_milky_way.6e6ebeca.jpg\";"],"sourceRoot":""}