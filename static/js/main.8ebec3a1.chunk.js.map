{"version":3,"sources":["stores/store.ts","components/3d/Particles.tsx","hooks/useTurntable.tsx","hooks/useWobble.tsx","components/3d/Rings.tsx","components/3d/Prism.tsx","stores/WarpStore.ts","components/3d/WarpEffect.tsx","shaders/warp.vert","shaders/warp.frag","components/3d/Effects.jsx","components/3d/FlareLight.tsx","components/3d/CelestialBody.tsx","stores/BodyStore.ts","components/3d/Planets.tsx","components/3d/Environment.tsx","components/3d/VRCamera.tsx","hooks/useVR.tsx","stores/AudioStore.ts","components/UI.tsx","components/Sound.tsx","routes/Home.tsx","components/3d/Rig.tsx","routes/Warp.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/sounds/ambient.ogg","assets/textures/2k_sun.jpg","assets/textures/2k_makemake_fictional.jpg","assets/textures/2k_ceres_fictional.jpg","assets/textures/2k_haumea_fictional.jpg","assets/textures/lens_flare.jpg","assets/textures/lens_flare_disk.jpg","assets/textures/lens_flare_blur.jpg","assets/textures/lens_flare_ring.jpg","assets/textures/8k_stars_milky_way.jpg"],"names":["useStore","create","set","get","statics","sunRef","undefined","prismColorPrimary","THREE","prismColorSecondary","prismPosition","cameraPosition","prismScale","ringColor","fov","glRenderer","isMobile","test","navigator","userAgent","effectsEnabled","quality","window","devicePixelRatio","actions","setGL","gl","setEnableEffects","bool","setQuality","newQuality","Particles","count","instance","useRef","emissionColor","state","dummy","useMemo","particles","Array","map","d","Math","random","offset","normalize","multiplyScalar","speed","scale","min","useFrame","forEach","particle","i","cos","sin","a","b","r","position","x","y","z","rotation","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","ref","args","length","frustumCulled","attach","color","emissive","useTurntable","axis","rate","useWobble","factor","defaultValue","fn","time","clock","getElapsedTime","Rings","forwardRef","props","height","rotationOffset","toruses","elt","yPos","degToRad","torus","arr","rot","PI","lerp","roughness","emissiveIntensity","opacity","transparent","side","selector","Prism","prismGroup","cube","light1","light2","prismGeometry","cubeGeometry","toNonIndexed","useSpring","from","config","mass","tension","friction","cubeSpring","setCubeSpring","useEffect","interval","setInterval","clearInterval","material","intensity","distance","mesh","geometry","wireframe","yRotation","FOV","getState","useWarpStore","mutations","rig","camera","controls","target","threshold","targetSpeed","warping","stopped","startWarp","stop","alignTo","to","warpTo","setTimeout","diameter","tan","init","quaternion","copy","multiply","addEffect","q1","lookAt","q2","slerp","t","clone","max","distanceTo","translateZ","distanceOffset","WarpEffect","uniforms","iTime","value","iResolution","seed","uSpeed","aspect","useThree","plane","useUpdate","setX","vertexShader","fragmentShader","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","Effects","composer","scene","size","width","setSize","render","attachArray","FXAAShader","material-uniforms-resolution-value","lensflare","Lensflare","randomRange","lower","upper","FlareLight","flareTex","useLoader","lensFlare","flareBlurTex","lensFlareDisk","lensFlareBlur","light","lensFlareRing","addElement","LensflareElement","setHSL","add","remove","CelestialBody","children","isStar","texture","turnRate","emissiveMap","useBodyStore","bodies","name","sunTex","marsTex","moon1Tex","moon2Tex","Planets","sunCorona","corona","body","key","alphaMap","sizeAttenuation","Environment","sky","rt","image","fromEquirectangularTexture","background","VRCamera","cam","xr","isPresenting","getCamera","useVR","useState","threeButton","setThreeButton","buttonText","setButtonText","disabled","setDisabled","onClickAction","useCallback","click","button","VRButton","createButton","isSessionSupported","then","supported","useAudioStore","audio","toggleAudio","UIButton","styled","top","bottom","left","right","border","padding","UI","vrButtonAction","as","href","onClick","ambient","Audio","ambientSound","Sound","shouldPlay","loop","play","pause","Home","vr","concurrent","antialias","near","far","onCreated","setClearColor","style","shadowMap","fallback","minDistance","touches","ONE","ROTATE","TWO","DOLLY_PAN","targets","warpToSelector","initSelector","Rig","group","Warp","innerStyles","barStyles","containerStyles","dataStyles","App","exact","path","process","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.8ebec3a1.chunk.js","sourcesContent":["import create from 'zustand'\nimport * as THREE from 'three'\n\ntype State = {\n    readonly statics: {}\n    prismColorPrimary: THREE.Color\n    prismColorSecondary: THREE.Color\n    prismPosition: THREE.Vector3\n    cameraPosition: THREE.Vector3\n    prismScale: THREE.Vector3\n    ringColor: THREE.Color\n    fov: number\n    glRenderer: THREE.WebGLRenderer | null\n    isMobile: boolean\n    effectsEnabled: boolean\n    quality: number\n    actions: {\n        setGL: (gl: THREE.WebGLRenderer) => void\n        setEnableEffects: (bool: boolean) => void\n        setQuality: (newQuality: number) => void\n    }\n}\n\nconst useStore = create<State>((set, get) => ({\n    statics: {},\n    sunRef: undefined,\n    prismColorPrimary: new THREE.Color('#355cd6'),\n    prismColorSecondary: new THREE.Color('#6cbca0'),\n    prismPosition: new THREE.Vector3(0, 8, 0),\n    cameraPosition: new THREE.Vector3(0, 1.6, 20),\n    prismScale: new THREE.Vector3(1, 1.8, 1),\n    ringColor: new THREE.Color('#d7ee9b'),\n    fov: 73.7,\n    glRenderer: null,\n    isMobile: /iPhone|iPad|iPod|Android/i.test(navigator.userAgent),\n    effectsEnabled: true,\n    quality: window.devicePixelRatio,\n    actions: {\n        setGL: (gl) => void set({ glRenderer: gl }),\n        setEnableEffects: (bool) => void set({ effectsEnabled: bool }),\n        setQuality: (newQuality) => void set({ quality: newQuality * window.devicePixelRatio }),\n    },\n}))\n\nexport default useStore\n","import React, { useRef, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport useStore from '../../stores/store'\n\nconst Particles = ({ count = 1500, ...props }) => {\n    const instance = useRef<THREE.InstancedMesh>()\n\n    const emissionColor = useStore((state) => state.prismColorSecondary)\n\n    const dummy = useMemo(() => new THREE.Object3D(), [])\n    const particles: any[] = useMemo(() => {\n        const r = 5\n        return [...Array(count)].map(() => ({\n            d: Math.random() * 10,\n            offset: new THREE.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5)\n                .normalize()\n                .multiplyScalar(Math.random() * r),\n            speed: Math.random() / 200 + 0.01,\n            scale: Math.min(0.1, Math.random() / 40),\n        }))\n    }, [count])\n\n    useFrame(() => {\n        particles.forEach((particle, i) => {\n            const { offset, scale, speed } = particle\n            const d = (particle.d += speed / 2)\n            const cos = Math.cos(d)\n            const sin = Math.sin(d)\n            const a = cos + sin / 100\n            const b = sin + Math.cos(d * 2) / 100\n            const r = cos\n            dummy.position.set(offset.x + a / 10, offset.y + b / 10, offset.z + a / 10)\n            dummy.scale.set(scale, scale, scale)\n            dummy.rotation.set(r, r * 2, r * 3)\n            dummy.updateMatrix()\n            instance.current!.setMatrixAt(i, dummy.matrix)\n        })\n        instance.current!.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <instancedMesh\n            ref={instance}\n            args={[null as any, null as any, particles.length]}\n            position={[0, 8, 0]}\n            frustumCulled={false}\n        >\n            <icosahedronBufferGeometry attach=\"geometry\" args={[1]} />\n            <meshStandardMaterial attach=\"material\" color={'#ffffff'} emissive={emissionColor} />\n        </instancedMesh>\n    )\n}\n\nexport default Particles\n","import { useFrame } from 'react-three-fiber'\nimport React from 'react'\n\ntype Turntable = (\n    ref: React.MutableRefObject<any>,\n    options: {\n        readonly axis?: string\n        readonly rate?: number\n    }\n) => React.MutableRefObject<any>\n\nconst useTurntable: Turntable = (ref, { axis = 'y', rate = 0.01 }) => {\n    useFrame(() => {\n        ref.current!.rotation[axis] += rate\n    })\n    return ref\n}\n\nexport default useTurntable\n","import { useFrame } from 'react-three-fiber'\nimport React from 'react'\n\ntype Wobble = (\n    ref: React.MutableRefObject<any>,\n    options: {\n        readonly axis?: string\n        readonly factor?: number\n        readonly defaultValue?: number\n        readonly fn?: 'sin' | 'tan' | 'cos'\n    }\n) => React.MutableRefObject<any>\n\nconst useWobble: Wobble = (ref, { axis = 'y', factor = 1, defaultValue = 0, fn = 'sin' }) => {\n    useFrame((state) => {\n        const time = state.clock.getElapsedTime()\n        ref.current!.position[axis] = defaultValue + Math[fn](time) * factor\n    })\n    return ref\n}\n\nexport default useWobble\n","import React, { forwardRef, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { ReactThreeFiber, useFrame } from 'react-three-fiber'\nimport useStore from '../../stores/store'\n\ninterface RingProps extends ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group> {\n    count?: number\n    height?: number\n    rotationOffset?: number\n}\n\nconst Rings = forwardRef((props: RingProps, ref) => {\n    const { count = 10, height = 20, rotationOffset = 10 } = props\n\n    const ringColor = useStore((state) => state.ringColor)\n\n    const instance = useRef<THREE.InstancedMesh>()\n\n    const dummy = useMemo(() => new THREE.Object3D(), [])\n    const toruses = useMemo(\n        () =>\n            [...Array(count)].map((elt, i) => ({\n                yPos: i / count,\n                rotation: THREE.MathUtils.degToRad(i * rotationOffset),\n            })),\n        [count, rotationOffset]\n    )\n\n    useFrame(() => {\n        toruses.forEach((torus, i, arr) => {\n            const { yPos } = torus\n            if (yPos >= 1) {\n                torus.yPos = 0\n                if (i < toruses.length - 1) {\n                    torus.rotation = arr[i + 1].rotation + THREE.MathUtils.degToRad(rotationOffset)\n                } else {\n                    torus.rotation = arr[0].rotation + THREE.MathUtils.degToRad(rotationOffset)\n                }\n            }\n            const y = (torus.yPos += 0.001)\n            const rot = (torus.rotation += 0.001)\n\n            const scale = 8 * Math.sin(Math.PI * yPos)\n\n            dummy.position.set(0, THREE.MathUtils.lerp(0, height, y), 0)\n            dummy.rotation.set(Math.PI / 2, 0, rot)\n            dummy.scale.set(scale, scale, scale)\n            dummy.updateMatrix()\n            instance.current!.setMatrixAt(i, dummy.matrix)\n        })\n        instance.current!.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <group ref={ref as React.MutableRefObject<THREE.Group>} {...props}>\n            <instancedMesh ref={instance} args={[null as any, null as any, toruses.length]}>\n                <torusBufferGeometry attach=\"geometry\" args={[1, 0.002, 5, 3]} />\n                <meshStandardMaterial\n                    attach=\"material\"\n                    roughness={0.1}\n                    color={ringColor}\n                    emissive={ringColor}\n                    emissiveIntensity={0.5}\n                    opacity={0.5}\n                    transparent\n                    side={THREE.DoubleSide}\n                />\n            </instancedMesh>\n        </group>\n    )\n})\n\nexport default Rings\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\nimport useTurntable from '../../hooks/useTurntable'\nimport useWobble from '../../hooks/useWobble'\nimport useStore from '../../stores/store'\nimport Rings from './Rings'\nimport { animated as a, useSpring } from 'react-spring/three'\n\ntype SpringProps = {\n    rotation: [number, number, number]\n}\n\nconst selector = (state) => ({\n    prismColorPrimary: state.prismColorPrimary,\n    prismColorSecondary: state.prismColorSecondary,\n    prismPosition: state.prismPosition,\n    prismScale: state.prismScale,\n})\n\nconst Prism = () => {\n    const { prismColorPrimary, prismColorSecondary, prismPosition, prismScale } = useStore(selector)\n\n    const prismGroup = useRef<THREE.Group>()\n    const cube = useRef<THREE.Mesh<THREE.BoxBufferGeometry, THREE.MeshStandardMaterial>>()\n    const light1 = useRef<THREE.PointLight>()\n    const light2 = useRef<THREE.PointLight>()\n\n    const prismGeometry = useMemo(() => new THREE.SphereBufferGeometry(3.5, 4, 2), [])\n    const cubeGeometry = useMemo(() => new THREE.BoxBufferGeometry(1, 1, 1).toNonIndexed(), [])\n\n    const [cubeSpring, setCubeSpring]: [SpringProps, any] = useSpring(() => ({\n        rotation: [\n            Math.random() * Math.PI * 4,\n            Math.random() * Math.PI * 4,\n            Math.random() * Math.PI * 4,\n        ],\n        from: { rotation: [0, 0, 0] },\n        config: { mass: 30, tension: 10, friction: 6 },\n    }))\n\n    useEffect(() => {\n        const interval = setInterval(\n            () =>\n                void setCubeSpring({\n                    rotation: [\n                        Math.random() * Math.PI * 4,\n                        Math.random() * Math.PI * 4,\n                        Math.random() * Math.PI * 4,\n                    ],\n                }),\n            3000\n        )\n        return () => void clearInterval(interval)\n    }, [setCubeSpring])\n\n    useWobble(prismGroup, { defaultValue: prismPosition.y, factor: 0.5 })\n    useTurntable(prismGroup, { rate: 0.005 })\n\n    useFrame(({ clock }) => {\n        const time = clock.getElapsedTime()\n        cube.current!.material.emissiveIntensity = Math.sin(time * Math.PI * 0.5) / 2 + 1.5\n\n        // explode the cube\n        /*        const { position, normal } = cube.current!.geometry.attributes\n        for (let i = 0; i < 36; i++) {\n            const px = position.array[i * 3]\n            const py = position.array[i * 3 + 1]\n            const pz = position.array[i * 3 + 2]\n\n            const nx = normal.array[i * 3]\n            const ny = normal.array[i * 3 + 1]\n            const nz = normal.array[i * 3 + 2]\n\n            position.setXYZ(\n                i,\n                px + nx * 0.001 * Math.sin(time),\n                py + ny * 0.001 * Math.sin(time),\n                pz + nz * 0.001 * Math.sin(time)\n            )\n        }\n        position.needsUpdate = true*/\n\n        light1.current!.intensity = cube.current!.material.emissiveIntensity\n        light1.current!.position.y = prismGroup.current!.position.y\n        light2.current!.intensity = cube.current!.material.emissiveIntensity\n        light2.current!.position.y = -prismGroup.current!.position.y\n    })\n\n    return (\n        <group>\n            <group ref={prismGroup} position={prismPosition}>\n                {/*light*/}\n                <pointLight ref={light1} distance={20} color={prismColorPrimary} />\n                <pointLight ref={light2} distance={20} color={prismColorPrimary} />\n                {/*light cube*/}\n                <a.mesh ref={cube} geometry={cubeGeometry} scale={[1.4, 1.4, 1.4]} {...cubeSpring}>\n                    <meshStandardMaterial\n                        attach=\"material\"\n                        color={prismColorSecondary}\n                        emissive={prismColorPrimary}\n                        side={THREE.DoubleSide}\n                    />\n                </a.mesh>\n                {/*wireframe*/}\n                <mesh scale={prismScale} geometry={prismGeometry}>\n                    <meshStandardMaterial\n                        attach=\"material\"\n                        color={prismColorSecondary}\n                        emissive={prismColorPrimary}\n                        wireframe\n                    />\n                </mesh>\n                {/*prism*/}\n                <mesh scale={prismScale} geometry={prismGeometry}>\n                    <meshPhysicalMaterial\n                        attach=\"material\"\n                        color={prismColorSecondary}\n                        opacity={0.4}\n                        transparent\n                    />\n                </mesh>\n            </group>\n            <Rings position={[prismPosition.x, prismPosition.y - 10, prismPosition.z]} />\n        </group>\n    )\n}\n\nexport default Prism\n","import create from 'zustand'\nimport { addEffect } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport useStore from './store'\n\ntype WarpStore = {\n    mutations: {\n        rig: THREE.Group | undefined\n        camera: THREE.Camera | undefined\n        controls: any\n        target: CelestialBodyType | undefined\n        threshold: number\n        speed: number\n        targetSpeed: number\n        warping: boolean\n        stopped: boolean\n    }\n    actions: {\n        readonly startWarp: () => void\n        readonly stop: () => void\n        readonly warpTo: (to: CelestialBodyType) => void\n        readonly alignTo: (to: CelestialBodyType) => void\n    }\n    init: (rig: THREE.Group, camera: THREE.Camera, controls: any) => void\n}\n\nconst yRotation = new THREE.Quaternion(0, 1, 0, 0)\nconst DISTANCE_OFFSET = 110\nconst FOV = useStore.getState().fov\n\nconst useWarpStore = create<WarpStore>((set, get) => ({\n    mutations: {\n        rig: undefined,\n        camera: undefined,\n        controls: undefined,\n        target: undefined,\n        threshold: 0,\n        speed: 0,\n        targetSpeed: 0,\n        warping: false,\n        stopped: true,\n    },\n    actions: {\n        startWarp: () =>\n            // @ts-ignore\n            set((state) => {\n                state.mutations.targetSpeed = 100\n                state.mutations.warping = true\n            }),\n        stop: () =>\n            // @ts-ignore\n            set((state) => {\n                state.mutations.targetSpeed = 0\n                state.mutations.warping = false\n                state.mutations.stopped = true\n            }),\n        alignTo: (to) =>\n            // @ts-ignore\n            set((state) => {\n                state.mutations.targetSpeed = 5\n                state.mutations.target = to\n                state.mutations.stopped = false\n            }),\n        warpTo: (to) => {\n            get().actions.alignTo(to)\n            setTimeout(() => {\n                // @ts-ignore\n                set((state) => {\n                    // state.mutations.target = to\n                    state.mutations.threshold =\n                        to.diameter / 2 / Math.tan((Math.PI * FOV) / 360) + DISTANCE_OFFSET // calculate the distance needed for the object to fill the screen. Offset for deceleration\n                })\n                get().actions.startWarp()\n            }, 3000)\n        },\n    },\n    init: (rig, camera, controls) => {\n        const mutations = get().mutations\n        const actions = get().actions\n        // @ts-ignore\n        set((state) => {\n            state.mutations.rig = rig\n            state.mutations.camera = camera\n            state.mutations.controls = controls\n        })\n\n        // attach camera to rig on init\n        mutations.camera!.quaternion.copy(mutations.rig!.quaternion).multiply(yRotation)\n        mutations.camera!.position.copy(mutations.rig!.position)\n\n        // @ts-ignore\n        addEffect(() => {\n            const {\n                speed,\n                targetSpeed,\n                warping,\n                stopped,\n                rig,\n                camera,\n                controls,\n                target,\n                threshold,\n            } = mutations\n\n            if (stopped) {\n                mutations.speed += (0 - speed) * 0.05 // target speed is 0 when not warping. Decelerate faster\n            } else if (!stopped) {\n                // rotate rig to face target\n                const q1 = new THREE.Quaternion().copy(rig!.quaternion)\n                rig!.lookAt(target!.position)\n                const q2 = new THREE.Quaternion().copy(rig!.quaternion)\n                THREE.Quaternion.slerp(q1, q2, rig!.quaternion, 0.03)\n\n                // rotate camera to face rig\n                const t = rig!.quaternion.clone().multiply(yRotation) // rotate camera 180degrees around Y\n                camera!.quaternion.slerp(t, 0.1)\n\n                // accelerate\n                mutations.speed += (targetSpeed - speed) * Math.max(speed / 2000, 0.001)\n\n                // end warp when close to target\n                const distanceLeft = rig!.position.distanceTo(target!.position) - target!.diameter\n                if (distanceLeft < threshold) actions.stop()\n            }\n            // apply speed to position\n            rig!.translateZ(mutations.speed / 20)\n            // camera!.position.lerp(rig!.position, 0.8)\n            camera!.position.copy(rig!.position)\n            // controls.target.copy(rig!.position)\n        })\n    },\n}))\n\nexport default useWarpStore\n","import React, { useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useThree, useUpdate } from 'react-three-fiber'\nimport useWarpStore from '../../stores/WarpStore'\nimport useStore from '../../stores/store'\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport vertex from '!!raw-loader!../../shaders/warp.vert'\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport frag from '!!raw-loader!../../shaders/warp.frag'\n\nconst FOV = useStore.getState().fov\nconst distanceOffset = 1 / 2 / Math.tan((Math.PI * FOV) / 360)\n\nconst mutations = useWarpStore.getState().mutations\n\n/**\n * A plane with a fragment shader. Placed so that it covers the screen exactly\n */\n/**\n * TODO: Add this to effect so it always covers the screen\n */\n\nconst WarpEffect = () => {\n    const uniforms = useRef<Uniforms>({\n        iTime: { value: 0 },\n        iResolution: { value: new THREE.Vector2(1, 1) },\n        seed: { value: Math.random() / 5 },\n        uSpeed: { value: 0 },\n    })\n    const { aspect } = useThree()\n\n    const plane = useUpdate<THREE.Mesh>(() => {\n        plane.current!.scale.setX(aspect)\n        uniforms.current!.iResolution.value = new THREE.Vector2(aspect, 1) // update shader aspect ratio here\n    }, [aspect])\n\n    useFrame(({ clock }) => {\n        uniforms.current.uSpeed.value = mutations.speed\n        uniforms.current.iTime.value = clock.getElapsedTime()\n    })\n\n    return (\n        <mesh ref={plane} position={[0, 0, distanceOffset]}>\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n            <shaderMaterial\n                attach=\"material\"\n                args={[\n                    {\n                        uniforms: uniforms.current,\n                        vertexShader: vertex,\n                        fragmentShader: frag,\n                    },\n                ]}\n                transparent\n                side={THREE.DoubleSide}\n            />\n        </mesh>\n    )\n}\n\nexport default WarpEffect\n","export default \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\\n\";","export default \"uniform vec3 iResolution;\\nuniform float iTime;\\nuniform float uSpeed;   // a value from 0 to 100\\nuniform float seed;\\nvarying vec2 vUv;\\n\\n// adapted from https://www.shadertoy.com/view/Msl3WH\\n\\nfloat map(float value, float min1, float max1, float min2, float max2) {\\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\\n}\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\\n    float time = iTime * 10.0;\\n\\n    float s = 0.0;\\n    float v = 0.0;\\n\\n    vec2 uv = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\\n\\n    float t = time * 0.005;\\n\\n    vec3 col = vec3(0.0);\\n\\n    vec3 init = vec3(0.25 + seed, 0.25 + sin(time * 0.001) * 0.4, time * 0.005);\\n\\n    for (float r = 0.; r < uSpeed * 1.2; r++) {\\n        vec3 p = init + s * vec3(uv, map(uSpeed, 0., 100., 0.135, 0.005));\\n\\n        p.z = mod(p.z, 2.0);\\n\\n        for (int i = 0; i < 10; i++) {\\n            p = abs(p * 2.04) / dot(p, p) - 0.75;\\n        }\\n\\n        v += length(p * p) * smoothstep(0.0, 0.5, 1.0 - s) * .002;\\n\\n        col += vec3( + v * 0.5, 0.1 + v * 0.5, 1.2 - s * 0.5) * v * 0.007;\\n        s += .01;\\n    }\\n    fragColor = vec4(col, col.x+col.y+col.z/6.);\\n}\\n\\nvoid main() {\\n    mainImage(gl_FragColor, vUv * iResolution.xy);\\n}\\n\";","import * as THREE from 'three'\nimport React, { useRef, useEffect, useMemo } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\n\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass })\n\nconst Effects = () => {\n    const composer = useRef()\n    const { scene, gl, size, camera } = useThree()\n    const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [size])\n    useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n    useFrame(() => composer.current.render(), 2)\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n            <unrealBloomPass attachArray=\"passes\" args={[aspect, 0.4, 1, 0.2]} />\n            <shaderPass\n                attachArray=\"passes\"\n                args={[FXAAShader]}\n                material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n            />\n        </effectComposer>\n    )\n}\n\nexport default Effects\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from 'react-three-fiber'\nimport { lensFlare, lensFlareDisk, lensFlareBlur, lensFlareRing } from '../../assets'\nimport { Lensflare, LensflareElement } from 'three/examples/jsm/objects/Lensflare'\n\nconst lensflare = new Lensflare()\n\nconst randomRange = (lower, upper) => {\n    return lower + Math.random() * (upper - lower)\n}\n\nconst FlareLight = () => {\n    const flareTex = useLoader(THREE.TextureLoader, lensFlare)\n    const flareDiskTex = useLoader(THREE.TextureLoader, lensFlareDisk)\n    const flareBlurTex = useLoader(THREE.TextureLoader, lensFlareBlur)\n    const flareRingTex = useLoader(THREE.TextureLoader, lensFlareRing)\n\n    const light = useRef<THREE.PointLight>()\n\n    useEffect(() => {\n        lensflare.addElement(new LensflareElement(flareTex, 200, 0))\n\n        for (let i = 0; i < 10; i++) {\n            const offset = randomRange(0.05, 0.4)\n            const size = randomRange(16, 48)\n            const color = new THREE.Color().setHSL(randomRange(0, 1), randomRange(0, 0.1), 0.5)\n            lensflare.addElement(new LensflareElement(flareBlurTex, size, offset, color))\n        }\n        for (let i = 0; i < 5; i++) {\n            const offset = randomRange(-0.15, -0.05)\n            const size = randomRange(16, 48)\n            const color = new THREE.Color().setHSL(randomRange(0, 1), randomRange(0, 0.1), 0.5)\n            lensflare.addElement(new LensflareElement(flareBlurTex, size, offset, color))\n        }\n\n        light.current!.add(lensflare)\n\n        return () => void light.current!.remove(lensflare)\n    }, [])\n\n    return <pointLight ref={light} color={'#ffffff'} intensity={1} />\n}\n\nexport default FlareLight\n","import React, { forwardRef, useRef } from 'react'\nimport * as THREE from 'three'\nimport { ReactThreeFiber, useLoader } from 'react-three-fiber'\nimport useTurntable from '../../hooks/useTurntable'\nimport FlareLight from './FlareLight'\n\ninterface CelestialBodyProps extends ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group> {\n    diameter: number\n    turnRate?: number\n    isStar?: boolean\n    texture?: any\n}\n\n/**\n * The base celestial body. Renders a sphere with a texture\n */\nconst CelestialBody = forwardRef(({ children, ...props }: CelestialBodyProps, ref) => {\n    const { diameter, isStar = false, texture, turnRate } = props\n    const mesh = useRef()\n\n    useTurntable(mesh, { rate: turnRate })\n\n    const map = useLoader(THREE.TextureLoader, texture)\n\n    return (\n        <group ref={ref as React.MutableRefObject<THREE.Group>} {...props}>\n            {isStar ? <FlareLight /> : null}\n            <mesh ref={mesh} scale={[diameter, diameter, diameter]}>\n                <sphereBufferGeometry attach=\"geometry\" args={[1, 64, 32]} />\n                <meshStandardMaterial\n                    attach=\"material\"\n                    color={'#eeeeee'}\n                    map={map}\n                    emissive={isStar ? new THREE.Color('#ffffff') : undefined}\n                    emissiveMap={isStar ? map : undefined}\n                    emissiveIntensity={isStar ? 1 : 0}\n                    roughness={0.5}\n                />\n            </mesh>\n            {children}\n        </group>\n    )\n})\n\nexport default CelestialBody\n","import create from 'zustand'\nimport * as THREE from 'three'\n\nimport { sunTex, marsTex, moon1Tex, moon2Tex } from '../assets'\n\ntype BodyState = {\n    bodies: CelestialBodyType[]\n}\n\nconst useBodyStore = create<BodyState>(() => ({\n    bodies: [\n        {\n            name: 'sun',\n            position: new THREE.Vector3(-800, 200, -2000),\n            diameter: 20,\n            texture: sunTex,\n            isStar: true,\n            turnRate: 0.0002,\n        },\n        {\n            name: 'mars',\n            position: new THREE.Vector3(250, 500, -600),\n            diameter: 200,\n            texture: marsTex,\n            turnRate: -0.0005,\n        },\n        {\n            name: 'moon1',\n            position: new THREE.Vector3(-650, 5, -400),\n            diameter: 30,\n            texture: moon1Tex,\n            turnRate: 0.0008,\n        },\n        {\n            name: 'moon2',\n            position: new THREE.Vector3(100, -50, 400),\n            diameter: 30,\n            texture: moon2Tex,\n            turnRate: 0.001,\n        },\n    ],\n}))\n\nexport default useBodyStore\n","import React from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from 'react-three-fiber'\nimport CelestialBody from './CelestialBody'\n\nimport { lensFlare as corona } from '../../assets'\n\nimport useBodyStore from '../../stores/BodyStore'\n\nconst bodies = useBodyStore.getState().bodies\n\nconst Planets = () => {\n    const sunCorona = useLoader(THREE.TextureLoader, corona)\n\n    return (\n        <>\n            {bodies.map((body) => (\n                <CelestialBody {...body} key={body.name}>\n                    {body.isStar ? (\n                        <sprite scale={[0.5, 0.5, 0.5]}>\n                            <spriteMaterial\n                                attach={'material'}\n                                map={sunCorona}\n                                alphaMap={sunCorona}\n                                sizeAttenuation={false}\n                            />\n                        </sprite>\n                    ) : null}\n                </CelestialBody>\n            ))}\n        </>\n    )\n}\n\nexport default Planets\n","import { useLoader, useThree } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport sky from '../../assets/textures/8k_stars_milky_way.jpg'\nimport { useEffect } from 'react'\n\nconst Environment = () => {\n    const { scene, gl } = useThree()\n    const texture = useLoader(THREE.TextureLoader, sky)\n\n    useEffect(() => {\n        const rt = new THREE.WebGLCubeRenderTarget(texture.image.height)\n        rt.fromEquirectangularTexture(gl, texture)\n        scene.background = rt\n    })\n\n    return null\n}\n\nexport default Environment\n","import React, { useEffect, useRef } from 'react'\nimport { useThree } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport useStore from '../../stores/store'\n\nconst VRCamera = () => {\n    const { camera, gl } = useThree()\n\n    const { cameraPosition } = useStore((state) => state)\n\n    const rig = useRef<THREE.Group>()\n\n    useEffect(() => {\n        // if (!gl.xr.isPresenting) return\n        const cam = gl.xr.isPresenting ? gl.xr.getCamera(camera) : camera\n        rig.current!.add(cam)\n        return () => void rig.current!.remove(cam)\n    }, [gl.xr.isPresenting, gl.xr, camera, rig])\n\n    return <group ref={rig} position={cameraPosition} />\n}\n\nexport default VRCamera\n","import { useCallback, useEffect, useState } from 'react'\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton'\nimport useStore from '../stores/store'\n\ninterface XRSystem {\n    isSessionSupported(sessionType: string): Promise<null>\n}\n\ndeclare global {\n    interface Navigator {\n        xr: XRSystem\n    }\n}\n\ntype T = () => [() => void, string, boolean]\n\nconst HAS_VR = 'Enter VR'\nconst NO_VR = 'VR Unavailable'\n\n/**\n * A wrapper around the Threejs VRButton import.\n */\nconst useVR: T = () => {\n    const [threeButton, setThreeButton] = useState<HTMLButtonElement>()\n    const [buttonText, setButtonText] = useState('')\n    const [disabled, setDisabled] = useState(false)\n\n    const gl = useStore((state) => state.glRenderer)\n    const setEnableEffects = useStore((state) => state.actions.setEnableEffects)\n\n    const onClickAction = useCallback(() => {\n        threeButton!.click()\n        setEnableEffects(false)\n    }, [threeButton, setEnableEffects])\n\n    useEffect(() => {\n        if (!navigator.xr || !gl) return\n        const button = VRButton.createButton(gl)\n        setThreeButton(button as HTMLButtonElement)\n        navigator.xr.isSessionSupported('immersive-vr').then((supported) => {\n            supported ? setButtonText(HAS_VR) : setButtonText(NO_VR)\n        })\n    }, [gl])\n\n    useEffect(() => {\n        setDisabled(buttonText === NO_VR)\n    }, [buttonText])\n\n    return [onClickAction, buttonText, disabled]\n}\n\nexport default useVR\n","import create from 'zustand'\n\ntype AudioState = {\n    audio: boolean\n    toggleAudio: () => void\n}\n\nconst useAudioStore = create<AudioState>((set, get) => ({\n    audio: false,\n    toggleAudio: () => void set({ audio: !get().audio }),\n}))\n\nexport default useAudioStore\n","import React from 'react'\nimport styled from 'styled-components'\nimport useVR from '../hooks/useVR'\nimport useAudioStore from '../stores/AudioStore'\n\ntype UIButtonProps = {\n    readonly position?: string\n    readonly top?: string\n    readonly bottom?: string\n    readonly left?: string\n    readonly right?: string\n    readonly width?: string\n    readonly padding?: string\n    readonly border?: boolean\n}\n\nexport const UIButton = styled.button<UIButtonProps>`\n    position: ${(props) => props.position || 'fixed'};\n    color: #fff;\n    top: ${(props) => props.top};\n    bottom: ${(props) => props.bottom};\n    left: ${(props) => props.left};\n    right: ${(props) => props.right};\n    width: ${(props) => props.width};\n    border: ${(props) => props.border && '1px solid #fff'};\n    border-radius: 5px;\n    background: rgba(0, 0, 0, 0.1);\n    padding: ${(props) => props.padding || '6px 12px'};\n    text-align: center;\n    opacity: 0.8;\n    outline: none;\n    z-index: 999;\n    transition: opacity 0.3s;\n    &:hover {\n        ${(props) => (props.disabled ? null : `opacity:1`)}\n    }\n`\n\nconst UI = () => {\n    const audio = useAudioStore((state) => state.audio)\n    const toggleAudio = useAudioStore((state) => state.toggleAudio)\n    const [vrButtonAction, buttonText, disabled] = useVR()\n\n    return (\n        <>\n            <UIButton\n                as={'a'}\n                top={'10px'}\n                left={'10px'}\n                border\n                href={'https://github.com/Mr-Quin/traveler'}\n                target={'/'}\n            >\n                Source\n            </UIButton>\n            <UIButton bottom={'20px'} left={'10px'} border onClick={toggleAudio}>\n                Audio: {audio ? 'On' : 'Off'}\n            </UIButton>\n            <UIButton\n                bottom={'20px'}\n                right={'20px'}\n                width={'120px'}\n                border\n                onClick={vrButtonAction}\n                disabled={disabled}\n            >\n                {buttonText}\n            </UIButton>\n        </>\n    )\n}\n\nexport default UI\n","import { useEffect } from 'react'\nimport useAudioStore from '../stores/AudioStore'\n\nimport { ambientSound } from '../assets'\n\nconst ambient = new Audio(ambientSound)\n\nconst Sound = () => {\n    const shouldPlay = useAudioStore((state) => state.audio)\n\n    useEffect(() => {\n        ambient.loop = true\n    }, [])\n\n    useEffect(() => {\n        shouldPlay ? ambient.play() : ambient.pause()\n    }, [shouldPlay])\n\n    return null\n}\n\nexport default Sound\n","import React, { Suspense } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport { OrbitControls } from 'drei'\nimport useStore from '../stores/store'\nimport Particles from '../components/3d/Particles'\nimport Prism from '../components/3d/Prism'\nimport WarpEffect from '../components/3d/WarpEffect'\nimport Effects from '../components/3d/Effects'\nimport Planets from '../components/3d/Planets'\nimport Environment from '../components/3d/Environment'\nimport VRCamera from '../components/3d/VRCamera'\nimport UI from '../components/UI'\nimport Sound from '../components/Sound'\nimport { Loader } from 'drei'\n\nconst selector = (state) => ({\n    cameraPosition: state.cameraPosition,\n    effectsEnabled: state.effectsEnabled,\n    prismPosition: state.prismPosition,\n    setGL: state.actions.setGL,\n})\n\nconst Home = () => {\n    const { cameraPosition, effectsEnabled, prismPosition, setGL } = useStore(selector)\n\n    return (\n        <>\n            <Canvas\n                vr\n                concurrent\n                gl={{ antialias: true }}\n                camera={{\n                    fov: 70,\n                    position: cameraPosition,\n                    near: 0.01,\n                    far: 4000,\n                }}\n                onCreated={({ gl }) => {\n                    gl.setClearColor('#07060c')\n                    setGL(gl)\n                }}\n                style={{\n                    position: 'fixed',\n                    height: '100%',\n                    width: '100%',\n                    top: 0,\n                    left: 0,\n                }}\n                shadowMap\n            >\n                <Suspense fallback={null}>\n                    <Particles count={350} />\n                    <Prism />\n                    <Planets />\n                    {effectsEnabled ? <Environment /> : null}\n                    <WarpEffect />\n                    <ambientLight args={['#6368e2', 0.15]} />\n                    <Sound />\n                </Suspense>\n                {effectsEnabled ? <Effects /> : null}\n                {effectsEnabled ? null : <VRCamera />}\n                <OrbitControls\n                    target={prismPosition}\n                    minDistance={10}\n                    // maxDistance={125}\n                    // maxPolarAngle={1.7}\n                    touches={{\n                        ONE: THREE.TOUCH.ROTATE,\n                        TWO: THREE.TOUCH.DOLLY_PAN,\n                    }}\n                />\n            </Canvas>\n            {/*<Loader />*/}\n            <UI />\n        </>\n    )\n}\n\nexport default Home\n","import React, { useEffect, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\nimport useWarpStore from '../../stores/WarpStore'\nimport useBodyStore from '../../stores/BodyStore'\nimport { OrbitControls } from 'drei'\nimport Vessel from './Vessel'\n\nconst targets = useBodyStore.getState().bodies\nconst warpToSelector = (state) => state.actions.warpTo\nconst initSelector = (state) => state.init\n\nconst Rig = (props) => {\n    const group = useRef<THREE.Group>()\n    const controls = useRef()\n\n    const { camera } = useThree()\n\n    const warpTo = useWarpStore(warpToSelector)\n    const init = useWarpStore(initSelector)\n\n    useEffect(() => {\n        init(group.current!, camera, controls.current!)\n    }, [])\n\n    useEffect(() => {\n        setTimeout(() => {\n            warpTo(targets[0])\n            setInterval(() => {\n                warpTo(targets[(Math.random() * 4) << 0])\n            }, 20000)\n        }, 2000)\n    }, [])\n\n    return (\n        <>\n            <group ref={group}>\n                <group>\n                    {/*<Vessel position={[0, -0.2, 1]} scale={[0.08, 0.08, 0.08]} />*/}\n                    {props.children}\n                </group>\n            </group>\n            {/*<OrbitControls*/}\n            {/*    ref={controls}*/}\n            {/*    target={[0, -0.2, 1]}*/}\n            {/*    maxDistance={125}*/}\n            {/*    touches={{*/}\n            {/*        ONE: THREE.TOUCH.ROTATE,*/}\n            {/*        TWO: THREE.TOUCH.DOLLY_PAN,*/}\n            {/*    }}*/}\n            {/*/>*/}\n        </>\n    )\n}\n\nexport default Rig\n","import React, { Suspense, useRef } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport { OrbitControls } from 'drei'\nimport useStore from '../stores/store'\nimport Particles from '../components/3d/Particles'\nimport Prism from '../components/3d/Prism'\nimport WarpEffect from '../components/3d/WarpEffect'\nimport Effects from '../components/3d/Effects'\nimport Planets from '../components/3d/Planets'\nimport Environment from '../components/3d/Environment'\nimport VRCamera from '../components/3d/VRCamera'\nimport UI from '../components/UI'\nimport Sound from '../components/Sound'\nimport Rig from '../components/3d/Rig'\nimport { Loader } from 'drei'\n\nconst selector = (state) => ({\n    cameraPosition: state.cameraPosition,\n    effectsEnabled: state.effectsEnabled,\n    setGL: state.actions.setGL,\n    fov: state.fov,\n})\n\nconst Warp = () => {\n    const { cameraPosition, effectsEnabled, setGL, fov } = useStore(selector)\n\n    // @ts-ignore\n    return (\n        <>\n            <Canvas\n                vr\n                concurrent\n                gl={{ antialias: true }}\n                camera={{\n                    fov: fov,\n                    position: cameraPosition,\n                    near: 0.01,\n                    far: 40000,\n                }}\n                onCreated={({ gl }) => {\n                    gl.setClearColor('#07060c')\n                    setGL(gl)\n                }}\n                style={{\n                    position: 'fixed',\n                    height: '100%',\n                    width: '100%',\n                    top: 0,\n                    left: 0,\n                }}\n                shadowMap\n            >\n                <Suspense fallback={null}>\n                    <Planets />\n                    {effectsEnabled ? <Environment /> : null}\n                    <Rig>\n                        <WarpEffect />\n                    </Rig>\n                    <ambientLight args={['#6368e2', 0.15]} />\n                    <Sound />\n                </Suspense>\n                {effectsEnabled ? <Effects /> : null}\n                {effectsEnabled ? null : <VRCamera />}\n            </Canvas>\n            <Loader innerStyles={null} barStyles={null} containerStyles={null} dataStyles={null} />\n            <UI />\n        </>\n    )\n}\n\nexport default Warp\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Home from './routes/Home'\nimport Warp from './routes/Warp'\n\nconst App = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path={process.env.PUBLIC_URL + '/'}>\n                    <Home />\n                </Route>\n                <Route exact path={process.env.PUBLIC_URL + '/warp'}>\n                    <Warp />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","module.exports = __webpack_public_path__ + \"static/media/ambient.51e1df41.ogg\";","module.exports = __webpack_public_path__ + \"static/media/2k_sun.f8d91fb7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_makemake_fictional.37998f7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_ceres_fictional.e7dce55f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2k_haumea_fictional.11888d39.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare.5c8678b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare_disk.9e9a510a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare_blur.15645033.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lens_flare_ring.2e90f194.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8k_stars_milky_way.6e6ebeca.jpg\";"],"sourceRoot":""}